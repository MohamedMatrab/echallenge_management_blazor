@page "/books"
@using BlazorWASM.Services
@using Microsoft.AspNetCore.Authorization
@using SharedBlocks.Dtos.Books
@inject IBookApiClient BookApiClient
@inject NavigationManager NavigationManager
@inject IRoleService RoleService
@using System.Security.Claims
@* @attribute [Authorize] *@

<PageTitle>Book Library</PageTitle>

<div class="container">
    <h1>Book Library</h1>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search by author..." @bind="searchAuthor" @bind:event="oninput" />
                <button class="btn btn-outline-primary" type="button" @onclick="SearchByAuthor">Search</button>
                <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">Clear</button>
            </div>
        </div>
        <div class="col-md-3">
            <div class="input-group">
                <select class="form-select" @bind="selectedGenre">
                    <option value="">All Genres</option>
                    @foreach (var genre in genres)
                    {
                        <option value="@genre">@genre</option>
                    }
                </select>
                <button class="btn btn-outline-primary" type="button" @onclick="FilterByGenre">Filter</button>
            </div>
        </div>
        @if (isAdmin)
        {
            <div class="col-md-3 text-end">
                <button class="btn btn-primary" @onclick="AddNewBook">
                    <i class="bi bi-plus-circle"></i> Add New Book
                </button>
            </div>
        }
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
            <button type="button" class="btn-close float-end" @onclick="ClearError"></button>
        </div>
    }
    else if (books == null || !books.Any())
    {
        <div class="alert alert-info" role="alert">
            No books found. Please add some books or try a different search.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var book in books)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@book.Author</h6>
                            <div class="card-text">
                                <div><span class="fw-bold">Genre:</span> @book.Genre</div>
                                <div><span class="fw-bold">ISBN:</span> @book.ISBN</div>
                                <div><span class="fw-bold">Published:</span> @book.PublishedDate.ToString("MMM dd, yyyy")</div>
                                <div><span class="fw-bold">Available:</span> @book.AvailableStock</div>
                            </div>
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="btn-group w-100">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewBookDetails(book.Id)">
                                    <i class="bi bi-eye"></i> View
                                </button>
                                @if (isAdmin)
                                {
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditBook(book.Id)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDeleteBook(book)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="d-flex justify-content-center mt-4">
            <nav>
                <ul class="pagination">
                    @if (currentPage > 1)
                    {
                        <li class="page-item">
                            <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">Previous</button>
                        </li>
                    }

                    @for (int i = 1; i <= totalPages; i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                        </li>
                    }

                    @if (currentPage < totalPages)
                    {
                        <li class="page-item">
                            <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">Next</button>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
</div>

@if (showDeleteConfirmation)
{
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the book "@bookToDelete?.Title" by @bookToDelete?.Author?</p>
                    <p class="text-danger">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteBook">Delete</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
@* </div> *@
}
@code {
    private List<BookDTO>? books;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private int currentPage = 1;
    private int pageSize = 9;
    private int totalCount = 0;
    private int totalPages => (int)Math.Ceiling(totalCount / (double)pageSize);
    
    private string searchAuthor = string.Empty;
    private string selectedGenre = string.Empty;
    private bool isSearching = false;
    private List<string> genres = new List<string>
            {
                "Fiction", "Non-Fiction", "Science Fiction", "Fantasy", "Mystery",
                "Romance", "Thriller", "Horror", "Biography", "History", "Self-Help"
            };
    
    private bool showDeleteConfirmation = false;
    private BookDTO? bookToDelete;

    private bool isAdmin = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
		isAdmin = await RoleService.HasRoleAsync("Admin");
    }

    private async Task LoadBooks()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            BooksResponseDTO response;
            
            if (isSearching && !string.IsNullOrEmpty(searchAuthor))
                response = await BookApiClient.GetBooksByAuthorAsync(searchAuthor);
            else if (isSearching && !string.IsNullOrEmpty(selectedGenre))
                response = await BookApiClient.GetBooksByGenreAsync(selectedGenre);
            else
                response = await BookApiClient.GetAllBooksAsync(currentPage, pageSize);

            if (response.Success)
            {
                books = response.Data?.ToList() ?? new List<BookDTO>();
                totalCount = response.TotalCount;
            }
            else
            {
                errorMessage = response.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading books: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
   

    private async Task SearchByAuthor()
    {
        if (string.IsNullOrWhiteSpace(searchAuthor))
        {
            await ClearSearch();
            return;
        }
        
        isSearching = true;
        selectedGenre = string.Empty;
        currentPage = 1;
        await LoadBooks();
    }

    private async Task FilterByGenre()
    {
        if (string.IsNullOrWhiteSpace(selectedGenre))
        {
            await ClearSearch();
            return;
        }
        
        isSearching = true;
        searchAuthor = string.Empty;
        currentPage = 1;
        await LoadBooks();
    }

    private async Task ClearSearch()
    {
        isSearching = false;
        searchAuthor = string.Empty;
        selectedGenre = string.Empty;
        currentPage = 1;
        await LoadBooks();
    }

    private void ClearError()
    {
        errorMessage = string.Empty;
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadBooks();
    }

    private void AddNewBook()
    {
        NavigationManager.NavigateTo("/books/add");
    }

    private void ViewBookDetails(Guid id)
    {
        NavigationManager.NavigateTo($"/books/details/{id}");
    }

    private void EditBook(Guid id)
    {
        NavigationManager.NavigateTo($"/books/edit/{id}");
    }

    private void ConfirmDeleteBook(BookDTO book)
    {
        bookToDelete = book;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        bookToDelete = null;
        showDeleteConfirmation = false;
    }

    private async Task DeleteBook()
    {
        if (bookToDelete == null)
            return;
            
        try
        {
            var response = await BookApiClient.DeleteBookAsync(bookToDelete.Id);
            
            if (response.Success)
            {
                await LoadBooks();
            }
            else
            {
                errorMessage = response.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting book: {ex.Message}";
        }
        finally
        {
            bookToDelete = null;
            showDeleteConfirmation = false;
        }
    }
}