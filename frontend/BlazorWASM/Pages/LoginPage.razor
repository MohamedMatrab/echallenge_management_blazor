@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Json
@using BlazorWASM.Providers
@using SharedBlocks.Dtos.Request
@using SharedBlocks.Dtos.Response
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <div class="alert alert-danger" style="display: @(showError ? "block" : "none")">
                            @errorMessage
                        </div>

                        <div class="form-group mb-3">
                            <label for="email">UserName</label>
                            <InputText id="email" @bind-Value="loginModel.UserName" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.UserName)" class="text-danger" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> Loading...</span>
                                }
                                else
                                {
                                    <span>Login</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <p class="mb-0">Don't have an account? <a href="/register">Register</a></p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginUserDTO loginModel = new LoginUserDTO();
    private bool isLoading = false;
    private bool showError = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        showError = false;
        isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<AuthResult>();

                if (tokenResponse != null && !string.IsNullOrEmpty(tokenResponse.Token))
                {
                    // await LocalStorage.SetItemAsync("authToken", tokenResponse.Token);

                    await ((CustomAuthStateProvider)AuthStateProvider).MarkUserAsAuthenticated(tokenResponse.Token);

                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    showError = true;
                    errorMessage = "Invalid authentication response";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                showError = true;
                errorMessage = $"Login failed: {(string.IsNullOrEmpty(errorContent) ? response.ReasonPhrase : errorContent)}";
            }
        }
        catch (Exception ex)
        {
            showError = true;
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}